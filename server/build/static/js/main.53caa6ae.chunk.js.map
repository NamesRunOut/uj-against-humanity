{"version":3,"sources":["hooks/Socket.tsx","components/atoms/StartButton.tsx","components/molecules/Points.tsx","components/molecules/Decks.tsx","hooks/Settings.tsx","components/atoms/DragButton.tsx","components/organisms/navbar.tsx","hooks/BlackCard.tsx","functions/playedCards.tsx","hooks/CardsPlayed.tsx","components/atoms/BlackCard.tsx","components/atoms/Placeholders.tsx","components/atoms/CommitedCard.tsx","components/molecules/CardsPlayed.tsx","components/organisms/main.tsx","hooks/PlayerCards.tsx","components/atoms/Loader.tsx","components/atoms/WhiteCard.tsx","components/atoms/Blocker.tsx","components/organisms/cards.tsx","images/github.svg","images/twitter.svg","images/gmail.svg","components/atoms/Contact.tsx","components/molecules/Actions.tsx","components/molecules/Scoreboard.tsx","functions/chat.tsx","components/molecules/Chat.tsx","components/organisms/info.tsx","pages/Homepage.tsx","pages/Contact.js","pages/404.js","App.tsx","index.tsx"],"names":["client","io","SocketContext","createContext","Socket","props","useState","socket","Provider","value","children","StartButton","response","useContext","type","id","onClick","emit","disabled","Points","className","defaultValue","number","document","getElementById","Decks","decks","setDecks","useEffect","on","cat","tmp","i","length","push","deck","checked","map","onChange","event","e","parseFloat","String","changeDecks","target","htmlFor","name","SettingsContext","undefined","Settings","canDrag","setCanDrag","DragButton","Navbar","setResponse","data","BlackCardContext","BlackCard","blackType","setBlackType","card","CardsPlayedContext","CardsPlayed","cards","setCards","tmpcards","settmpcards","off","cardid","players","console","log","winningPlayer","Array","matchid","player","playerName","chosen","revealed","j","box","handleHighlight","playedCards","played","inputArr","n","current","insertionSort","handlePlayedCards","text","black","setBlack","Placeholders","placeholder","setPlaceholder","setTmp","CommitedCard","tzarPicked","style","opacity","backgroundImage","element","isArray","Main","PlayerCardsContext","PlayerCards","whiteCards","setWhiteCards","message","setMessage","loader","setLoader","canCommit","commitCount","commit","setCommit","sauce","cardSauce","tzarid","cardSauceid","tmpWhite","splice","Loader","item","hidden","x","visible","WhiteCard","commitFunction","motion","div","drag","layout","variants","whileHover","scale","Blocker","container","transition","ease","duration","Cards","cardCommited","initial","animate","Contact","href","rel","src","github","alt","twitter","to","gmail","canSkip","setCanSkip","setTimeout","Scoreboard","setPlayers","sessionid","playerList","p","status","tzar","points","marginLeft","updateScroll","scrollTop","scrollHeight","displayMessage","msg","createElement","innerHTML","date","author","appendChild","Chat","addEventListener","keyCode","writeMessage","div1","inp1","setAttribute","but1","onclick","writeCustom","displayCustom","aria-label","Info","Actions","nickname","Homepage","window","onload","username","cname","ca","cookie","split","c","charAt","substring","indexOf","getCookie","prompt","cvalue","exdays","d","Date","setTime","getTime","expires","toUTCString","setCookie","checkCookie","onbeforeunload","input","getHours","padStart","getMinutes","getSeconds","Emailinput","label","useField","field","meta","touched","error","Titleinput","Textinput","initialValues","email","title","validationSchema","Yup","nullable","min","max","onSubmit","values","setSubmitting","resetForm","body","sender","fetch","method","JSON","stringify","headers","then","alert","isSubmitting","PageNotFound","location","App","exact","path","component","MissingPage","ReactDOM","render"],"mappings":"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","file":"static/js/main.53caa6ae.chunk.js","sourcesContent":["import React, {createContext, useState} from 'react'\r\nimport io from \"socket.io-client\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst ENDPOINT = \"http://127.0.0.1:4001\"\r\n//const socketClient = socketIOClient(ENDPOINT)\r\nconst client = io()\r\n\r\n// @ts-ignore\r\nexport const SocketContext = createContext()\r\n\r\nconst Socket = (props: { children: boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined; }) => {\r\n    const [socket] = useState(client);//useState(socketClient);\r\n\r\n    return (\r\n        <SocketContext.Provider value={socket}>\r\n            {props.children}\r\n        </SocketContext.Provider>\r\n    )\r\n}\r\n\r\nexport {Socket}","import React, {useContext} from \"react\";\r\n\r\nimport {SocketContext} from '../../hooks/Socket'\r\n\r\nconst StartButton: React.FC<{ response: boolean }> = ({response}) => {\r\n    const socket: any = useContext(SocketContext)\r\n\r\n    const startGame = () => {\r\n        socket.emit('start');\r\n    }\r\n\r\n    return (\r\n        <button type=\"button\" id=\"startButton\" onClick={startGame} disabled={response}>START</button>\r\n    );\r\n}\r\n\r\nexport default StartButton","import React, {useContext} from \"react\";\r\n\r\nimport {SocketContext} from '../../hooks/Socket'\r\n\r\nconst Points: React.FC<{ response: boolean }> = ({response}) => {\r\n    const socket: any = useContext(SocketContext)\r\n\r\n    const setPoints = () => {\r\n        // @ts-ignore\r\n        let number = document.getElementById(\"pointsInput\")?.value || 5\r\n        if (number) socket.emit('setPoints', number)\r\n    }\r\n\r\n    return (\r\n        <div className=\"navbar_points\">\r\n            Score limit:\r\n            <select id=\"pointsInput\" defaultValue='5'>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\">5</option>\r\n                <option value=\"6\">6</option>\r\n                <option value=\"7\">7</option>\r\n                <option value=\"8\">8</option>\r\n                <option value=\"9\">9</option>\r\n                <option value=\"10\">10</option>\r\n            </select>\r\n            <div>\r\n                <button type=\"button\" id=\"pointsButton\" onClick={setPoints} disabled={response}>Select</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Points","import React, {useContext, useEffect, useState} from \"react\";\r\n\r\nimport {SocketContext} from '../../hooks/Socket'\r\nimport {Category, Deck} from \"../../types/Deck\";\r\n\r\nconst Decks: React.FC<{ response: boolean }> = ({response}) => {\r\n    const socket: any = useContext(SocketContext)\r\n    const [decks, setDecks] = useState<Array<Deck>>([])\r\n\r\n    const changeDecks = (e: EventTarget & HTMLInputElement) => {\r\n        let {value, checked} = e\r\n        let tmp = [...decks]\r\n        for (let i = 0; i < tmp.length; i++)\r\n            if (parseFloat(String(tmp[i].deck.id)) === parseFloat(value)) {\r\n                tmp[i].checked = checked\r\n                break\r\n            }\r\n        setDecks([...tmp])\r\n    }\r\n\r\n    const sendDecks = () => {\r\n        let tmp = []\r\n        for (let i = 0; i < decks.length; i++)\r\n            if (decks[i].checked)\r\n                tmp.push(decks[i].deck.id)\r\n        socket.emit('setDecks', tmp)\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('recieveCategories', function (cat: Array<Category>) {\r\n            let tmp = []\r\n            for (let i = 0; i < cat.length; i++)\r\n                tmp.push({deck: cat[i], checked: true})\r\n            setDecks([...tmp])\r\n        });\r\n        //console.log(decks.length===0, response)\r\n    }, [socket]);\r\n\r\n    return (\r\n        <div className=\"navbar_decks\">\r\n            <button id=\"deckButton\" onClick={sendDecks} disabled={decks.length === 0 || response}>Decks select</button>\r\n            <div className=\"navbar_decks_content\" id=\"catplace\">\r\n                {decks.length !== 0 ? decks.map(deck => <span key={deck.deck.id}>\r\n                    <input type=\"checkbox\"\r\n                           className=\"deck\"\r\n                           value={deck.deck.id}\r\n                           checked={deck.checked}\r\n                           onChange={(event) => changeDecks(event.target)}/>\r\n                    <label htmlFor={String(deck.deck.id)}>\r\n                        {deck.deck.name}\r\n                    </label>\r\n                    <br/>\r\n                </span>) :\r\n                    <span>Sometimes it takes a while for the API/server to start. If you can't see any decks, please reload the page after a few minutes</span>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Decks","import React, {createContext, SetStateAction, useState} from 'react'\r\n\r\nexport const SettingsContext = createContext<any>([false, undefined])\r\n\r\nconst Settings = (props: { children: boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined }) => {\r\n    const [canDrag, setCanDrag] = useState<boolean>(false)\r\n\r\n    return (\r\n        <SettingsContext.Provider value={[canDrag, setCanDrag]}>\r\n            {props.children}\r\n        </SettingsContext.Provider>\r\n    )\r\n}\r\n\r\nexport {Settings}","import React, {useContext} from \"react\";\r\nimport {SettingsContext} from \"../../hooks/Settings\";\r\n\r\nconst DragButton = () => {\r\n    const [canDrag, setCanDrag] = useContext(SettingsContext)\r\n\r\n    return (\r\n        <div className=\"navbar_decks\">\r\n            <button onClick={() => setCanDrag((canDrag: boolean) => !canDrag)}>Drag\r\n                cards {canDrag ? 'ON' : 'OFF'}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DragButton","import React, {useContext, useEffect, useState} from \"react\";\r\n\r\nimport {SocketContext} from '../../hooks/Socket'\r\nimport StartButton from \"../atoms/StartButton\";\r\nimport Points from \"../molecules/Points\";\r\nimport Decks from \"../molecules/Decks\";\r\nimport DragButton from \"../atoms/DragButton\";\r\n\r\nconst Navbar = () => {\r\n    const socket: any = useContext(SocketContext)\r\n    const [response, setResponse] = useState(false)\r\n\r\n    useEffect(() => {\r\n        socket.on(\"startEnable\", function (data: string) {\r\n            setResponse(false)\r\n        })\r\n        socket.on(\"startDisable\", function (data: string) {\r\n            setResponse(true)\r\n        })\r\n    }, [socket]);\r\n\r\n    return (\r\n        <div className=\"navbar\" id=\"player\">\r\n            <StartButton response={response}/>\r\n            <Points response={response}/>\r\n            <Decks response={response}/>\r\n            <DragButton/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar","import React, {createContext, useContext, useEffect, useState} from 'react'\r\nimport {SocketContext} from \"./Socket\"\r\nimport {BlackCard as BlackCardType, BlackType} from \"../types/Card\";\r\n\r\nexport const BlackCardContext = createContext<BlackType>(0)\r\n\r\nconst BlackCard = (props: { children: boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined }) => {\r\n    const socket = useContext(SocketContext)\r\n    const [blackType, setBlackType] = useState<BlackType>(0)\r\n\r\n    useEffect(() => {\r\n        // @ts-ignore\r\n        socket.on('blackCard', function (card: BlackCardType) {\r\n            //console.log('Blackcard', card)\r\n            setBlackType(card.type)\r\n        });\r\n    }, [socket]);\r\n\r\n    return (\r\n        <BlackCardContext.Provider value={blackType}>\r\n            {props.children}\r\n        </BlackCardContext.Provider>\r\n    )\r\n}\r\n\r\nexport {BlackCard}","import {BlackType, CardPlayed} from \"../types/Card\";\r\nimport {Player} from \"../types/Player\";\r\n\r\nfunction insertionSort(inputArr: Array<CardPlayed>) {\r\n    let n = inputArr.length;\r\n    for (let i = 1; i < n; i++) {\r\n        let current = inputArr[i];\r\n        let j = i - 1;\r\n        while ((j > -1) && (current.player < inputArr[j].player)) {\r\n            inputArr[j + 1] = inputArr[j];\r\n            j--;\r\n        }\r\n        inputArr[j + 1] = current;\r\n    }\r\n    return inputArr;\r\n}\r\n\r\nexport const handleHighlight = (cardid: number, players: Player, cards: Array<CardPlayed> | Array<Array<CardPlayed>>, setCards: Function, settmpcards: Function, blackType: BlackType) => {\r\n    // TODO check later if rendering fine\r\n\r\n    console.log('highlight1', cards)\r\n\r\n    if (cards.length === 0) return\r\n\r\n    let winningPlayer = {id: 'unknown', name: 'unknown'}\r\n    let tmp = []\r\n\r\n    switch (blackType) {\r\n        case 0:\r\n            if (cards === Array<CardPlayed>()) {\r\n                for (let i = 0; i < cards.length; i++) {\r\n                    if (cards[i].matchid === cardid) {\r\n                        winningPlayer = {id: cards[i].player, name: players[cards[i].player].name}\r\n                        break\r\n                    }\r\n                }\r\n\r\n                for (let i = 0; i < cards.length; i++) {\r\n                    tmp.push({\r\n                        card: cards[i].card,\r\n                        matchid: cards[i].matchid,\r\n                        player: cards[i].player,\r\n                        playerName: players[cards[i].player].name,\r\n                        chosen: cards[i].player !== winningPlayer.id,\r\n                        revealed: true\r\n                    })\r\n                }\r\n                settmpcards([...tmp])\r\n            }\r\n            break;\r\n        case 2:\r\n        case 3:\r\n            if (cards === Array<Array<CardPlayed>>()) {\r\n                for (let i = 0; i < cards.length; i++) {\r\n                    for (let j = 0; j < cards[i].length; j++)\r\n                        if (cards[i][j].matchid === cardid) {\r\n                            winningPlayer = {id: cards[i][j].player, name: players[cards[i][j].player].name}\r\n                            break\r\n                        }\r\n                }\r\n\r\n                let box = []\r\n                for (let i = 0; i < cards.length; i++) {\r\n                    for (let j = 0; j < cards[i].length; j++) {\r\n                        //console.log( cards[i][j].player, winningPlayer.id,  cards[i][j].player !== winningPlayer.id)\r\n                        box.push({\r\n                            card: cards[i][j].card,\r\n                            matchid: cards[i][j].matchid,\r\n                            player: cards[i][j].player,\r\n                            playerName: players[cards[i][j].player].name,\r\n                            chosen: cards[i][j].player !== winningPlayer.id,\r\n                            revealed: true\r\n                        })\r\n                    }\r\n                    tmp.push(box)\r\n                    box = []\r\n                }\r\n                //console.log(tmp)\r\n                settmpcards([...tmp])\r\n            }\r\n            break;\r\n    }\r\n}\r\n\r\nexport const handlePlayedCards = (playedCards: Array<CardPlayed>, type: BlackType, cards: Array<CardPlayed>, setCards: Function, settmpcards: Function, blackType: BlackType) => {\r\n    console.log('played', cards, playedCards.length, type)\r\n\r\n    // TODO mix recieved cards\r\n\r\n    if (playedCards.length === 0) {\r\n        settmpcards([])\r\n        return\r\n    }\r\n    switch (type) {\r\n        case 0:\r\n            //console.log('0')\r\n            settmpcards([...playedCards])\r\n            break;\r\n        case 2:\r\n        case 3:\r\n            //console.log('2 or 3')\r\n            let played = playedCards\r\n            insertionSort(played)\r\n            let box = [played[0]]\r\n            let tmp = []\r\n            for (let i = 1; i < played.length; i++) {\r\n                if (played[i].player === played[i - 1].player) box.push(played[i])\r\n                else {\r\n                    tmp.push(box)\r\n                    box = [played[i]]\r\n                }\r\n            }\r\n            tmp.push(box)\r\n            settmpcards([...tmp])\r\n            //console.log('setup', tmp)\r\n            break;\r\n    }\r\n}","import React, {createContext, useContext, useEffect, useState} from 'react'\r\nimport {SocketContext} from \"./Socket\";\r\nimport {BlackCardContext} from \"./BlackCard\";\r\nimport {handleHighlight, handlePlayedCards} from \"../functions/playedCards\";\r\n\r\nimport {BlackType, CardPlayed} from '../types/Card'\r\n\r\nexport const CardsPlayedContext = createContext<any>([[],])\r\n\r\nconst CardsPlayed = (props: { children: boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined; }) => {\r\n    const socket: any = useContext(SocketContext)\r\n    const blackType: BlackType = useContext(BlackCardContext)\r\n\r\n    const [cards, setCards] = useState<Array<CardPlayed>>([])\r\n    const [tmpcards, settmpcards] = useState<Array<CardPlayed>>([])\r\n\r\n    useEffect(() => {\r\n        setCards([...tmpcards])\r\n    }, [tmpcards])\r\n\r\n    useEffect(() => {\r\n        socket.off('highlightCard').on('highlightCard', (cardid: number, players: any) => handleHighlight(cardid, players, cards, setCards, settmpcards, blackType))\r\n    }, [cards])\r\n\r\n    useEffect(() => {\r\n        socket.on('playedCards', (playedCards: any, type: BlackType) => handlePlayedCards(playedCards, type, cards, setCards, settmpcards, blackType))\r\n        //socket.on('highlightCard', (cardid, players) => handleHighlight(cardid, players))\r\n    }, [])\r\n\r\n    return (\r\n        <CardsPlayedContext.Provider value={[cards, setCards]}>\r\n            {props.children}\r\n        </CardsPlayedContext.Provider>\r\n    )\r\n}\r\n\r\nexport {CardsPlayed}","import React, {useContext, useEffect, useState} from \"react\"\r\nimport {SocketContext} from '../../hooks/Socket'\r\nimport {BlackCard as BlackCardType} from \"../../types/Card\";\r\n\r\nconst BlackCard = () => {\r\n    const socket: any = useContext(SocketContext)\r\n    const [black, setBlack] = useState<BlackCardType>({\r\n        id: 0,\r\n        text: 'Questions will appear here, answer with one (or more) of your cards',\r\n        type: 0\r\n    })\r\n\r\n    useEffect(() => {\r\n        socket.on('blackCard', (card: BlackCardType) => {\r\n            setBlack({\r\n                id: card.id,\r\n                text: card.text,\r\n                type: card.type\r\n            })\r\n        });\r\n    }, [socket]);\r\n\r\n    return (\r\n        <div id=\"blackCard\">\r\n            <div className=\"biggerCard blackCard\">\r\n                {black.text}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BlackCard","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {SocketContext} from \"../../hooks/Socket\";\r\n\r\nconst Placeholders = () => {\r\n    const socket: any = useContext(SocketContext)\r\n    const [placeholder, setPlaceholder] = useState<Array<number>>([])\r\n    const [tmp, setTmp] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (tmp !== 0) setPlaceholder([...placeholder, tmp])\r\n        else setPlaceholder([])\r\n    }, [tmp])\r\n\r\n    useEffect(() => {\r\n        socket.on('playedCardsHidden', function () {\r\n            setTmp(tmp => tmp + 1)\r\n        })\r\n        socket.on('playedCards', function (playedCards: any, type: number) {\r\n            setTmp(0)\r\n        })\r\n        socket.on('highlightCard', function (cardid: number, players: any) {\r\n            setTmp(0)\r\n        })\r\n    }, [socket]);\r\n\r\n    return (\r\n        <>\r\n            {placeholder.length > 0 ? placeholder.map(card => <div key={card} className=\"biggerCard hidden\"/>) : <></>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Placeholders","import React, {useContext} from \"react\"\r\nimport {SocketContext} from \"../../hooks/Socket\";\r\n\r\nconst CommitedCard: React.FC<{ card: any, player: string, playerName: string, chosen: boolean, revealed: boolean }> = ({\r\n                                                                                                                           card,\r\n                                                                                                                           player,\r\n                                                                                                                           playerName,\r\n                                                                                                                           chosen,\r\n                                                                                                                           revealed\r\n                                                                                                                       }) => {\r\n    const socket: any = useContext(SocketContext)\r\n\r\n    const tzarPicked = (cardid: number) => {\r\n        if (revealed) return\r\n        socket.emit('tzarPicked', cardid);\r\n    }\r\n\r\n    if (card.card.type === 0 || card.card.type === 2) {\r\n        return <div\r\n            key={card.matchid}\r\n            className=\"biggerCard\"\r\n            onClick={() => tzarPicked(card.matchid)}\r\n            style={{opacity: chosen ? '1' : '0.5'}}>\r\n            {card.card.text} {revealed ? `[${playerName}]` : ''}\r\n        </div>\r\n    } else if (card.card.type === 1) {\r\n        return <div\r\n            key={card.matchid}\r\n            className=\"biggerCard\"\r\n            onClick={() => tzarPicked(card.matchid)}\r\n            style={{backgroundImage: `url(${card.card.text})`, opacity: chosen ? '1' : '0.5'}}>\r\n            {revealed ? `[${playerName}]` : ''}\r\n        </div>\r\n    }\r\n    return <></>\r\n}\r\n\r\nexport default CommitedCard","import React, {useContext} from \"react\";\r\nimport Placeholders from \"../atoms/Placeholders\";\r\nimport CommitedCard from \"../atoms/CommitedCard\";\r\nimport {CardsPlayedContext} from \"../../hooks/CardsPlayed\";\r\nimport {BlackCardContext} from \"../../hooks/BlackCard\";\r\nimport {BlackType, CardPlayed} from \"../../types/Card\";\r\n\r\n// TODO blocking from commiting more cards\r\n\r\nconst CardsPlayed = () => {\r\n    const [cards]: [Array<CardPlayed> | Array<Array<CardPlayed>>] = useContext(CardsPlayedContext)\r\n    const blackType: BlackType = useContext(BlackCardContext)//useState(null)\r\n\r\n    // TODO unique keys for 2/3 cards display\r\n    // TODO check later if rendering fine\r\n\r\n    return (\r\n        <div id=\"cards\">\r\n            <Placeholders/>\r\n            {cards.length === 0 ? <></> :\r\n                cards.map(\r\n                    (element: CardPlayed | Array<CardPlayed>) => {\r\n                        switch (blackType) {\r\n                            case 0:\r\n                                if (!Array.isArray(element))\r\n                                    return <CommitedCard key={element.matchid} card={element} chosen={!element.chosen}\r\n                                                         revealed={element.revealed || false} playerName={'jhg'}\r\n                                                         player={element.player || 'unknown'}/>\r\n                                break;\r\n                            case 2:\r\n                            case 3:\r\n                                let i = 0\r\n                                if (Array.isArray(element))\r\n                                    return <div key={`${i++}box`} className=\"box\">\r\n                                        {element.map((box: CardPlayed) => {\r\n                                            return <CommitedCard key={`${box.matchid}${i++}`} card={box}\r\n                                                                 chosen={!box.chosen} revealed={box.revealed || false}\r\n                                                                 playerName={'jhg'} player={box.player || 'unknown'}/>\r\n                                        })}\r\n                                    </div>\r\n                                break;\r\n                        }\r\n                        return <></>\r\n                    }\r\n                )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardsPlayed","import React from \"react\";\r\nimport {CardsPlayed} from \"../../hooks/CardsPlayed\";\r\n\r\nimport BlackCard from \"../atoms/BlackCard\";\r\nimport CardsPlayedDiv from \"../molecules/CardsPlayed\";\r\n\r\nconst Main = () => {\r\n\r\n    return (\r\n        <div className=\"mainArea\">\r\n            <BlackCard/>\r\n            <div>\r\n                <CardsPlayed>\r\n                    <CardsPlayedDiv/>\r\n                </CardsPlayed>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import React, {createContext, useContext, useEffect, useState} from 'react'\r\nimport {SocketContext} from \"./Socket\";\r\nimport {BlackCardContext} from \"./BlackCard\";\r\nimport {Card, CardSauce, WhiteCard} from \"../types/Card\";\r\n\r\nexport const PlayerCardsContext = createContext<any>([])\r\n\r\nconst PlayerCards = (props: { children: boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined; }) => {\r\n    const blackType: number = useContext(BlackCardContext)\r\n    const socket: any = useContext(SocketContext)\r\n\r\n    const [whiteCards, setWhiteCards] = useState<Array<WhiteCard>>([])\r\n    const [message, setMessage] = useState<string | null>(null)\r\n    const [loader, setLoader] = useState<boolean>(false)\r\n\r\n    const [commit, setCommit] = useState({\r\n        canCommit: true,\r\n        commitCount: 0\r\n    })\r\n\r\n    const [tmp, setTmp] = useState<WhiteCard>({\r\n        card: {\r\n            cardid: -1,\r\n            matchid: -1\r\n        },\r\n        sauce: {\r\n            id: -1,\r\n            text: \"Example Card\",\r\n            type: 0\r\n        }\r\n    })\r\n\r\n    const cardCommited = (cardid: number, cardSauceid: number) => {\r\n        //console.log(commit.commitCount, commit.canCommit, blackType)\r\n\r\n        let tmpWhite = [...whiteCards]\r\n        if (tmpWhite.length === 0 || !commit.canCommit) return\r\n\r\n        switch (blackType) {\r\n            case 0:\r\n                if (commit.commitCount >= 0)\r\n                    setCommit({\r\n                        canCommit: false,\r\n                        commitCount: commit.commitCount\r\n                    })\r\n                else\r\n                    setCommit({\r\n                        canCommit: commit.canCommit,\r\n                        commitCount: commit.commitCount + 1\r\n                    })\r\n                break;\r\n            case 2:\r\n                if (commit.commitCount >= 1)\r\n                    setCommit({\r\n                        canCommit: false,\r\n                        commitCount: commit.commitCount\r\n                    })\r\n                else\r\n                    setCommit({\r\n                        canCommit: commit.canCommit,\r\n                        commitCount: commit.commitCount + 1\r\n                    })\r\n                break;\r\n            case 3:\r\n                if (commit.commitCount >= 2)\r\n                    setCommit({\r\n                        canCommit: false,\r\n                        commitCount: commit.commitCount\r\n                    })\r\n                else\r\n                    setCommit({\r\n                        canCommit: commit.canCommit,\r\n                        commitCount: commit.commitCount + 1\r\n                    })\r\n                break;\r\n        }\r\n        //console.log('white', tmpWhite)\r\n        //setCanCommit(false)\r\n        for (let i = 0; i < tmpWhite.length; i++) {\r\n            if (tmpWhite[i].card === undefined) {\r\n                tmpWhite.splice(i, 1)\r\n                continue\r\n            }\r\n            if (cardid === tmpWhite[i].card.matchid)\r\n                tmpWhite.splice(i, 1)\r\n        }\r\n        setWhiteCards([...tmpWhite])\r\n        socket.emit('cardCommited', cardid, cardSauceid);\r\n    }\r\n\r\n    // TODO cards block on commit, confirm selection\r\n\r\n    useEffect(() => {\r\n        tmp.card.matchid !== -1 && setWhiteCards([...whiteCards, tmp])\r\n    }, [tmp]);\r\n\r\n    useEffect(() => {\r\n        socket.on('recieveWhite', function (id: number, card: Card, cardSauce: CardSauce) {\r\n            setTmp({card: card, sauce: cardSauce})\r\n\r\n            /*if(cardSauce.type===2) {\r\n              let div1 = document.createElement(\"div\");\r\n              div1.className=\"info_chat_input\";\r\n\r\n              /*<div className=\"info_chat_input\">\r\n                <input id=\"customInput\" placeholder=\"Tu wpisz tekst customowej karty\" aria-label=\"Tu wpisz tekst customowej karty\" />\r\n                <button type=\"button\" onClick={writeCustom}>Send</button>\r\n              </div>*/\r\n\r\n            /*let inp1 = document.createElement(\"input\");\r\n            inp1.id = \"customInput\";\r\n            inp1.setAttribute(\"placeholder\", \"Tu wpisz tekst customowej karty\");\r\n            inp1.setAttribute(\"aria-label\", \"Tu wpisz tekst customowej karty\");\r\n\r\n            let but1 = document.createElement(\"button\");\r\n            but1.setAttribute(\"type\", \"button\");\r\n            but1.innerHTML = \"Send\";\r\n            but1.onclick = () => writeCustom();\r\n\r\n            div1.appendChild(inp1);\r\n            div1.appendChild(but1);\r\n\r\n            displayCustom(div1);\r\n          }\r\n\r\n          displayMessage({\r\n            date: '',\r\n            author: \"white card\",\r\n            sauce: \"[\"+card.matchid+\"] \"+cardSauce.text\r\n          });*/\r\n        })\r\n\r\n        socket.on('loadloader', function (number: string) {\r\n            setLoader(true)\r\n        })\r\n\r\n        socket.on('unloadloader', function (number: string) {\r\n            setLoader(false)\r\n        })\r\n\r\n        socket.on('tzarTurn', function () {\r\n            setMessage('You are the tzar, pick a card')\r\n            setCommit({\r\n                canCommit: false,\r\n                commitCount: commit.commitCount\r\n            })\r\n        })\r\n\r\n        socket.on('playerWait', function () {\r\n            setMessage('Tzar is picking a card')\r\n            setCommit({\r\n                canCommit: false,\r\n                commitCount: commit.commitCount\r\n            })\r\n        })\r\n\r\n        socket.on('blockTzar', function (tzarid: string) {\r\n            setMessage('You are the tzar')\r\n            setCommit({\r\n                canCommit: false,\r\n                commitCount: commit.commitCount\r\n            })\r\n        })\r\n\r\n        socket.on('enableCards', function () {\r\n            setMessage(null)\r\n            setCommit({\r\n                canCommit: true,\r\n                commitCount: 0\r\n            })\r\n        })\r\n\r\n        socket.on('clearBoard', function () {\r\n            setWhiteCards([])\r\n        })\r\n\r\n        socket.on(\"startDisable\", function (data: string) {\r\n            setCommit({\r\n                canCommit: true,\r\n                commitCount: 0\r\n            })\r\n        })\r\n    }, [socket]);\r\n\r\n    return (\r\n        <PlayerCardsContext.Provider value={[whiteCards, setWhiteCards, loader, message, cardCommited]}>\r\n            {props.children}\r\n        </PlayerCardsContext.Provider>\r\n    )\r\n}\r\n\r\nexport {PlayerCards}","import React from \"react\";\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loaderWrapper\">\r\n            <div className=\"wrapper\">\r\n                <div className=\"dot dot1\"/>\r\n                <div className=\"dot dot2\"/>\r\n                <div className=\"dot dot3\"/>\r\n                <div className=\"dot dot4\"/>\r\n                <div className=\"dot dot5\"/>\r\n                <div className=\"dot dot6\"/>\r\n                <div className=\"dot dot7\"/>\r\n                <div className=\"dot dot8\"/>\r\n                <div className=\"dot dot9\"/>\r\n                <div className=\"dot dot10\"/>\r\n                <div className=\"dot dot11\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React, {useContext} from \"react\"\r\nimport {motion} from \"framer-motion\"\r\nimport {SettingsContext} from \"../../hooks/Settings\";\r\n\r\nconst item = {\r\n    hidden: {x: 100, opacity: 0},\r\n    visible: {\r\n        x: 0,\r\n        opacity: 1\r\n    }\r\n}\r\n\r\nconst WhiteCard: React.FC<{ card: any, commitFunction: Function }> = ({card, commitFunction}) => {\r\n    const [canDrag] = useContext(SettingsContext)\r\n\r\n    if (card.sauce === undefined || card.card === undefined) return <></>\r\n    return (\r\n        <motion.div\r\n            drag={!!canDrag}\r\n            layout\r\n            className='card'\r\n            variants={item}\r\n            whileHover={{scale: 1.1}}\r\n            onClick={() => commitFunction(card.card.matchid, card.sauce.id)}\r\n            style={{backgroundImage: card.sauce.type === 1 ? `url(${card.sauce.text})` : ''}}>\r\n            {(card.sauce.type === 0 || card.sauce.type === 2) ? `${card.sauce.text} [${card.card.matchid}]` : ''}\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default WhiteCard","import React from \"react\"\r\n\r\nconst Blocker: React.FC<{ message: string }> = ({message}) => {\r\n    return (\r\n        <div id=\"blocker\"><h2>{message}</h2></div>\r\n    )\r\n}\r\n\r\nexport default Blocker","import React, {useContext} from \"react\";\r\n\r\nimport {motion} from \"framer-motion\"\r\n\r\nimport {PlayerCardsContext} from \"../../hooks/PlayerCards\";\r\nimport Loader from \"../atoms/Loader\";\r\nimport WhiteCardComponent from \"../atoms/WhiteCard\";\r\nimport Blocker from \"../atoms/Blocker\";\r\nimport {WhiteCard} from \"../../types/Card\";\r\n\r\nconst container = {\r\n    transition: {\r\n        ease: \"easeIn\",\r\n        duration: 1\r\n    }\r\n};\r\n\r\nconst Cards = () => {\r\n    const [whiteCards, , loader, message, cardCommited] = useContext<[Array<WhiteCard>, any, boolean, string | null, any]>(PlayerCardsContext)\r\n    console.log('render')\r\n    return (\r\n        <motion.div\r\n            layout\r\n            id=\"yourCards\"\r\n            initial=\"hidden\"\r\n            animate=\"visible\"\r\n            // @ts-ignore\r\n            variants={container}\r\n        >\r\n            {loader && <Loader/>}\r\n            {message !== null && <Blocker message={message}/>}\r\n            {whiteCards?.map(card => <WhiteCardComponent\r\n                key={card?.card?.matchid || 'temp'}\r\n                card={card}\r\n                commitFunction={cardCommited}/>)}\r\n        </motion.div>\r\n    );\r\n}\r\n\r\nexport default Cards;","export default __webpack_public_path__ + \"static/media/github.abc68d50.svg\";","export default __webpack_public_path__ + \"static/media/twitter.5d0a19d6.svg\";","export default __webpack_public_path__ + \"static/media/gmail.69f6dc21.svg\";","import React from \"react\"\r\nimport github from \"../../images/github.svg\";\r\nimport twitter from \"../../images/twitter.svg\";\r\nimport {Link} from \"react-router-dom\";\r\nimport gmail from \"../../images/gmail.svg\";\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <div className=\"contact\">\r\n            <a href=\"https://github.com/NamesRunOut\" target=\"_blank\" rel=\"noopener noreferrer\"><img src={github}\r\n                                                                                                    className=\"contactImage\"\r\n                                                                                                    alt=\"github\"/></a>\r\n            <a href=\"https://twitter.com/NamesRunOut\" target=\"_blank\" rel=\"noopener noreferrer\"><img src={twitter}\r\n                                                                                                     className=\"contactImage\"\r\n                                                                                                     alt=\"twitter\"/></a>\r\n            <Link to=\"/contact\">\r\n                <img src={gmail} className=\"contactImage\" alt=\"mail\"/>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Contact","import React, {useContext, useState} from \"react\"\r\n\r\nimport {SocketContext} from '../../hooks/Socket'\r\n\r\nconst BlackCard = () => {\r\n    const socket: any = useContext(SocketContext)\r\n    const [canSkip, setCanSkip] = useState(true)\r\n\r\n    const reroll = () => {\r\n        socket.emit('reroll');\r\n    }\r\n\r\n    const vote = () => {\r\n        socket.emit('vote');\r\n    }\r\n\r\n    const skip = () => {\r\n        if (!canSkip) return;\r\n        setCanSkip(false)\r\n        socket.emit('skipBlack');\r\n        setTimeout(function () {\r\n            setCanSkip(true)\r\n        }, 30000)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"info_actions_action\">\r\n                <div>\r\n                    <button type=\"button\" onClick={reroll}>Reroll cards</button>\r\n                </div>\r\n                <div>Once per game you can reroll all your cards (it has to be on your turn and you can't be the tzar)\r\n                </div>\r\n            </div>\r\n            <hr/>\r\n            <div className=\"info_actions_action\">\r\n                <div>\r\n                    <button type=\"button\" onClick={vote}>Points to all!</button>\r\n                </div>\r\n                <div>(Usable on tzar turn) If everybody in the lobby presses this button (tzar included), everyone who\r\n                    commited a card will be given a point\r\n                </div>\r\n            </div>\r\n            <hr/>\r\n            <div className=\"info_actions_action\">\r\n                <div>\r\n                    <button type=\"button\" onClick={skip} id=\"skipButton\">Skip black</button>\r\n                </div>\r\n                <div>Skip the current black card (30s cooldown per person)</div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BlackCard","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {SocketContext} from '../../hooks/Socket'\r\nimport {Player, PlayerScoreboardRecord} from \"../../types/Player\";\r\n\r\nconst Scoreboard = () => {\r\n    const socket: any = useContext(SocketContext)\r\n    //const [sessionid, setSessionid] = useState(\"not\")\r\n    const [players, setPlayers] = useState<Array<PlayerScoreboardRecord>>([])\r\n\r\n    let sessionid = \"not\"\r\n\r\n    useEffect(() => {\r\n        socket.on('sessionid', function (id: string) {\r\n            //setSessionid(id)\r\n            sessionid = id\r\n        });\r\n        socket.on('state', function (playerList: Array<string>, players: Player) {\r\n            let tmp: Array<PlayerScoreboardRecord>\r\n            tmp = []\r\n            for (let id in playerList) {\r\n                let p = players[playerList[id]]\r\n                let name = p.name\r\n                //console.log('session', p.id, sessionid)\r\n                if (p.id === sessionid) name += \" (you)\"\r\n                let status = \"\"\r\n                if (p.tzar) status = \"tzar\"\r\n                else if (!p.played) status = \"playing...\"\r\n                tmp.push({\r\n                    name: name,\r\n                    status: status,\r\n                    points: p.points,\r\n                    id: playerList[id]\r\n                })\r\n            }\r\n            setPlayers([...tmp])\r\n        })\r\n    }, [socket])\r\n\r\n    return (\r\n        <div id=\"scoreboard\">\r\n            {\r\n                players.length === 0 ? <></> :\r\n                    players.map(player => <span key={`${player.id}1`}>\r\n                        <div className=\"playerScore\">\r\n                            <div>\r\n                                {player.name} {player.status}<br/>\r\n                                Points: {player.points}\r\n                                <span style={{opacity: '0.2', marginLeft: '0.25em'}}>\r\n                                    [{player.id}]\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <hr/>\r\n                    </span>)\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scoreboard","import {Message} from \"../types/Message\";\r\n\r\nconst updateScroll = () => {\r\n    let element = document.getElementById(\"chatLog\")\r\n    if (element !== null) element.scrollTop = element.scrollHeight;\r\n}\r\n\r\nexport function displayMessage(message: Message) {\r\n    let msg = document.createElement(\"p\")\r\n    msg.innerHTML = message.date + \" \" + message.author + \": \" + message.sauce\r\n\r\n    let element = document.getElementById(\"chatLog\")\r\n    if (element !== null) element.appendChild(msg);\r\n    updateScroll();\r\n}\r\n\r\nexport function displayCustom(message: Node) {\r\n    let element = document.getElementById(\"chatLog\")\r\n    if (element !== null) element.appendChild(message);\r\n    updateScroll();\r\n}","import React, {useContext, useEffect} from \"react\"\r\nimport {SocketContext} from '../../hooks/Socket'\r\nimport {Card, CardSauce} from \"../../types/Card\";\r\nimport {displayCustom, displayMessage} from \"../../functions/chat\";\r\nimport {Message} from \"../../types/Message\";\r\n\r\nconst Chat = () => {\r\n    const socket: any = useContext(SocketContext)\r\n\r\n    document.addEventListener('keydown', logKey);\r\n\r\n    function logKey(e: { keyCode: number }) {\r\n        if (e.keyCode === 13) {\r\n            writeMessage();\r\n        }\r\n    }\r\n\r\n    const writeMessage = () => {\r\n        let element: any\r\n        element = (document.getElementById(\"chatInput\"))\r\n        if (element !== null) {\r\n            socket.emit('message', element.value);\r\n            element.value = \"\";\r\n        }\r\n    }\r\n\r\n    const writeCustom = () => {\r\n        // @ts-ignore\r\n        let text = document.getElementById('customInput')?.value || '';\r\n        socket.emit(\"writeCustom\", text);\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('message', function (message: Message) {\r\n            displayMessage(message);\r\n        })\r\n        socket.on('recieveWhite', function (id: number, card: Card, cardSauce: CardSauce) {\r\n            if (cardSauce.type === 2) {\r\n                let div1 = document.createElement(\"div\");\r\n                div1.className = \"info_chat_input\";\r\n\r\n                /*<div className=\"info_chat_input\">\r\n                  <input id=\"customInput\" placeholder=\"Tu wpisz tekst customowej karty\" aria-label=\"Tu wpisz tekst customowej karty\" />\r\n                  <button type=\"button\" onClick={writeCustom}>Send</button>\r\n                </div>*/\r\n\r\n                let inp1 = document.createElement(\"input\");\r\n                inp1.id = \"customInput\";\r\n                inp1.setAttribute(\"placeholder\", \"Tu wpisz tekst customowej karty\");\r\n                inp1.setAttribute(\"aria-label\", \"Tu wpisz tekst customowej karty\");\r\n\r\n                let but1 = document.createElement(\"button\");\r\n                but1.setAttribute(\"type\", \"button\");\r\n                but1.innerHTML = \"Send\";\r\n                but1.onclick = () => writeCustom();\r\n\r\n                div1.appendChild(inp1);\r\n                div1.appendChild(but1);\r\n\r\n                displayCustom(div1);\r\n            }\r\n\r\n            displayMessage({\r\n                date: '',\r\n                author: \"white card\",\r\n                sauce: \"[\" + card.matchid + \"] \" + cardSauce.text\r\n            });\r\n        })\r\n    }, [socket]);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <div id=\"chatLog\"/>\r\n            </div>\r\n            <div className=\"info_chat_input\">\r\n                <input id=\"chatInput\" placeholder=\"Chat\" aria-label=\"Chat\"/>\r\n                <button type=\"button\" onClick={writeMessage}>Send</button>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Chat","import React from \"react\";\r\n\r\nimport Contact from \"../atoms/Contact\";\r\nimport Actions from \"../molecules/Actions\";\r\nimport Scoreboard from \"../molecules/Scoreboard\";\r\nimport Chat from \"../molecules/Chat\";\r\n\r\nconst Info = () => {\r\n    return (\r\n        <div className=\"info\">\r\n            <div className=\"info_score\">\r\n                <div className=\"title\">Scoreboard\r\n                    <hr/>\r\n                </div>\r\n                <Scoreboard/>\r\n            </div>\r\n            <div className=\"info_chat\">\r\n                <Chat/>\r\n            </div>\r\n            <div className=\"info_actions\">\r\n                <div className=\"title\">Actions</div>\r\n                <hr/>\r\n                <Actions/>\r\n                <hr/>\r\n                <Contact/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Info","import React, {useContext} from 'react';\r\n\r\nimport Navbar from '../components/organisms/navbar'\r\nimport Main from '../components/organisms/main'\r\nimport Cards from '../components/organisms/cards'\r\nimport Info from '../components/organisms/info'\r\n\r\nimport {SocketContext} from '../hooks/Socket'\r\nimport {PlayerCards} from '../hooks/PlayerCards'\r\nimport {BlackCard} from \"../hooks/BlackCard\"\r\nimport {Settings} from \"../hooks/Settings\"\r\n\r\nlet nickname = \"unknown\";\r\n\r\nexport function getCookie(cname: string) {\r\n    let name = cname + \"=\";\r\n    let ca = document.cookie.split(';');\r\n    for (let i = 0; i < ca.length; i++) {\r\n        let c = ca[i];\r\n        while (c.charAt(0) === ' ') {\r\n            c = c.substring(1);\r\n        }\r\n        if (c.indexOf(name) === 0) {\r\n            return c.substring(name.length, c.length);\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n\r\nconst Homepage = () => {\r\n    const socket: any = useContext(SocketContext)\r\n\r\n    window.onload = function () {\r\n        socket.emit('new player');\r\n        checkCookie();\r\n    };\r\n\r\n    window.onbeforeunload = closingCode;\r\n\r\n    function closingCode() {\r\n        let date = new Date();\r\n        let input = {\r\n            date: \"[\" + String(date.getHours()).padStart(2, \"0\") + \":\"\r\n                + String(date.getMinutes()).padStart(2, \"0\") + \":\"\r\n                + String(date.getSeconds()).padStart(2, \"0\") + \"]\",\r\n            author: nickname,\r\n            sauce: \"leaves the game\"\r\n        }\r\n        socket.emit('message', input);\r\n        socket.emit('leaverTrigger');\r\n        return null;\r\n    }\r\n\r\n    function checkCookie() {\r\n        let username = getCookie(\"username\");\r\n        if (username !== \"\") {\r\n            socket.emit('updateName', username);\r\n            nickname = username;\r\n        } else {\r\n            username = prompt(\"Please enter your nickname\", \"\") || \"unknown\";\r\n            socket.emit('updateName', username);\r\n            if (username !== \"\" && username !== null && username !== undefined) {\r\n                setCookie(\"username\", username, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setCookie(cname: string, cvalue: string, exdays: number) {\r\n        let d = new Date();\r\n        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\r\n        let expires = \"expires=\" + d.toUTCString();\r\n        document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n    }\r\n\r\n    return (\r\n        <div id=\"wrapper\">\r\n            <Settings>\r\n                <Navbar/>\r\n                <BlackCard>\r\n                    <Main/>\r\n                    <PlayerCards>\r\n                        <Cards/>\r\n                    </PlayerCards>\r\n                </BlackCard>\r\n                <Info/>\r\n            </Settings>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Homepage;\r\n","import React from 'react'\r\n\r\nimport {Form, Formik, useField} from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst Emailinput = ({label, ...props}) => {\r\n    const [field, meta] = useField(props)\r\n\r\n    return (\r\n        <>\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <div className=\"form_error\">{meta.error}</div>\r\n            ) : null}\r\n        </>\r\n    )\r\n}\r\n\r\nconst Titleinput = ({label, ...props}) => {\r\n    const [field, meta] = useField(props)\r\n\r\n    return (\r\n        <>\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <div className=\"form_error\">{meta.error}</div>\r\n            ) : null}\r\n        </>\r\n    )\r\n}\r\n\r\nconst Textinput = ({label, ...props}) => {\r\n    const [field, meta] = useField(props)\r\n\r\n    return (\r\n        <>\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <div className=\"form_error\">{meta.error}</div>\r\n            ) : null}\r\n        </>\r\n    )\r\n}\r\n\r\nconst Contact = () => {\r\n\r\n    return (\r\n        <>\r\n            <Link to=\"/\">\r\n                <button className=\"form_back\">Back</button>\r\n            </Link>\r\n            <Formik\r\n                initialValues={{\r\n                    email: '',\r\n                    title: '',\r\n                    message: ''\r\n                }}\r\n\r\n                validationSchema={Yup.object({\r\n                    email: Yup.string()\r\n                        .email('Invalid email address')\r\n                        .nullable('Value is empty'),\r\n                    title: Yup.string()\r\n                        .min(3, \"The title must have at least 3 characters\")\r\n                        .max(35, \"The title is too long\")\r\n                        .nullable('Value is empty'),\r\n                    message: Yup.string()\r\n                        .min(3, \"Must have at least 3 characters\")\r\n                        .max(500, \"The message cant be longer than 500 characters\")\r\n                        .nullable('Value is empty'),\r\n                })\r\n                }\r\n\r\n                onSubmit={(values, {setSubmitting, resetForm}) => {\r\n                    const body = {\r\n                        sender: values.email,\r\n                        title: values.title,\r\n                        message: values.message\r\n                    }\r\n\r\n                    fetch('https://mysterious-caverns-api.herokuapp.com/mailboxes', {\r\n                        method: 'post',\r\n                        body: JSON.stringify(body),\r\n                        headers: {'Content-Type': 'application/json'}\r\n                    })\r\n                        .then(setSubmitting(false))\r\n                        .then(resetForm())\r\n                        .then(alert(\"Message successfully submitted!\"))\r\n                }\r\n                }\r\n            >\r\n\r\n                {props => (\r\n                    <div className=\"wrapper_form\">\r\n                        <Form className=\"form\">\r\n                            <h1>Contact form</h1>\r\n                            <Emailinput className=\"form_input\" label=\"Your email\" name=\"email\" type=\"email\"\r\n                                        placeholder=\"your@email.com\"/>\r\n                            <Titleinput className=\"form_input\" label=\"Title\" name=\"title\" type=\"text\"\r\n                                        placeholder=\"Your title\"/>\r\n                            <Textinput className=\"form_input--textarea\" label=\"Message\" name=\"message\"\r\n                                       placeholder=\"Write something here!\"/>\r\n                            <button className=\"form_submit\"\r\n                                    type=\"submit\">{props.isSubmitting ? 'Sending message...' : 'Submit'}</button>\r\n                        </Form>\r\n                    </div>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Contact","const PageNotFound = () => {\r\n    if (typeof window !== undefined) {\r\n        window.location = '/';\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default PageNotFound","import * as React from 'react'\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\"\n\nimport Homepage from './pages/Homepage'\nimport Contact from './pages/Contact'\nimport MissingPage from './pages/404'\n\nimport {Socket} from './hooks/Socket'\n\nimport './css/main.css'\n\nfunction App() {\n\n    return (\n        <Socket>\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" component={Homepage}/>\n                    <Route exact path=\"/contact\" component={Contact}/>\n                    <Route component={MissingPage}/>\n                </Switch>\n            </Router>\n        </Socket>\n    );\n}\n\nexport default App;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './css/main.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}